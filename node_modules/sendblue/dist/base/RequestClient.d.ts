/// <reference types="node" />
import { Agent, AgentOptions } from 'https';
import { AxiosInstance, AxiosRequestConfig } from 'axios';
export interface RequestClientOptions {
    timeout?: number;
    keepAlive?: boolean;
    keepAliveMsecs?: number;
    maxSockets?: number;
    maxTotalSockets?: number;
    maxFreeSockets?: number;
    scheduling?: 'fifo' | 'lifo';
    logLevel?: 'debug' | 'info' | 'warn' | 'error';
}
export interface RequestClientRequestOptions {
    logLevel?: 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'fatal';
}
export declare class RequestClient {
    defaultTimeout: number;
    agentOpts: AgentOptions;
    agent: Agent;
    axios: AxiosInstance;
    logLevel: string;
    constructor(opts: RequestClientOptions, apiKey: string, apiSecret: string);
    request(opts: AxiosRequestConfig & RequestClientRequestOptions): Promise<any>;
    filterLoggingHeaders(headers: any): string[];
    logRequest(options: AxiosRequestConfig): void;
}
